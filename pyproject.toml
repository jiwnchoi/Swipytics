[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "swipytics"
dynamic = ["version"]
description = 'EDA with tinder-like interaction'
readme = "README.md"
requires-python = ">=3.9, <3.12"
license = "MIT"
keywords = []
authors = [
  { name = "Jiwon Choi", email = "jiwnchoi@skku.edu" },
  { name = "Jaemin Jo", email = "jmjo@skku.edu" },
]
classifiers = [
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "pandas",
  "draco",
  "altair[all]",
  "scikit-learn",
  "python-multipart",
  "fastapi[standard]",
]
[project.optional-dependencies]
dev = ["ruff", "pyright", "pytest", "pytest-cov", "vega-datasets"]
[tool.hatch.build.targets.wheel]
packages = ["api"]
[project.urls]
Documentation = "https://github.com/jiwnchoi/swipytics#readme"
Issues = "https://github.com/jiwnchoi/swipytics/issues"
Source = "https://github.com/jiwnchoi/swipytics"

# [tool.hatch.version]
# path = "api/__about__.py"

[tool.hatch.envs.default]
features = ["dev"]
python = "3.11"

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]

[[tool.hatch.envs.all.matrix]]
python = ["3.9", "3.10", "3.11"]

[tool.coverage.run]
source_pkgs = ["swipytics", "tests"]
branch = true
parallel = true
# omit = ["api/__about__.py"]

[tool.coverage.paths]
swipytics = ["api", "*/swipytics/api"]
tests = ["tests", "*/api/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv",
]
src = ["api"]

# Same as Black.
line-length = 80
indent-width = 2

# Assume Python 3.8
target-version = "py39"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = ["E4", "E7", "E9", "F", "I", "FA"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.hatch.envs.test.scripts]
cov = 'pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=pkg --cov=tests'


[tool.pyright]
include = ["**/*.py"]
exclude = ["**/node_modules", "**/__pycache__", "experimental", "typestubs"]
reportMissingImports = true
reportMissingTypeStubs = false
